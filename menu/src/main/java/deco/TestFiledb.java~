package deco; // Or your main package

// AWT imports for FileDialog
import java.awt.FileDialog;
import java.awt.Frame; // FileDialog needs a parent Frame or null

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.List;

// Assuming EmployeeFileInfo and DirectFileDbService are in the same 'deco' package or imported

public class InteractiveFileTestWithDialog {

    // --- Database Connection Details ---
    private static final String DB_URL = "jdbc:mysql://localhost:3306/DECOHRS_DB";
    private static final String DB_USER = "your_db_username"; // REPLACE
    private static final String DB_PASS = "your_db_password"; // REPLACE
    // --- ---

    // --- File Storage Configuration ---
    private static final String USER_HOME_DIR = System.getProperty("user.home");
    private static final String UPLOAD_BASE_DIR = USER_HOME_DIR + File.separator + "decohrs_interactive_uploads";
    // --- ---

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Still used for Employee ID and file type
        DirectFileDBService service = new DirectFileDBService();
        Connection conn = null;
        File sourceFile = null; // To store the selected file

        try {
            // 1. Get Employee ID from user
            System.out.print("Enter Employee ID to upload file for: ");
            String employeeIdStr = scanner.nextLine();
            int employeeId;
            try {
                employeeId = Integer.parseInt(employeeIdStr);
            } catch (NumberFormatException e) {
                System.err.println("Invalid Employee ID format. Exiting.");
                return;
            }

            // 2. Use FileDialog to let user select a file
            System.out.println("Opening file dialog to select an image...");
            // Create a dummy Frame to act as parent for FileDialog (can be null)
            // If running in a headless environment, this might cause issues or require -Djava.awt.headless=true
            Frame parentFrame = null; // Or new Frame(); if you want a (briefly visible) window
            FileDialog fileDialog = new FileDialog(parentFrame, "Select Image to Upload", FileDialog.LOAD);
            // Optional: Set directory and file filter
            // fileDialog.setDirectory(System.getProperty("user.home")); // Start in user's home
            // fileDialog.setFile("*.jpg;*.png;*.gif;*.jpeg"); // Simple filter (might not work on all OS robustly)

            fileDialog.setVisible(true); // This blocks until a file is selected or dialog is closed

            if (fileDialog.getFile() != null) { // User selected a file
                String selectedDirectory = fileDialog.getDirectory();
                String selectedFileName = fileDialog.getFile();
                sourceFile = new File(selectedDirectory, selectedFileName);
                System.out.println("File selected: " + sourceFile.getAbsolutePath());
            } else { // User cancelled the dialog
                System.out.println("File selection cancelled. Exiting.");
                return;
            }

            if (!sourceFile.exists() || !sourceFile.isFile()) { // Should not happen if FileDialog worked
                System.err.println("Error: Selected file does not exist or is not a file.");
                return;
            }

            // 3. Prepare destination for file copy (same as before)
            File employeeUploadDir = new File(UPLOAD_BASE_DIR + File.separator + employeeId);
            if (!employeeUploadDir.exists()) {
                if (!employeeUploadDir.mkdirs()) {
                    System.err.println("Error: Could not create storage directory: " + employeeUploadDir.getAbsolutePath());
                    return;
                }
            }
            String originalFileName = sourceFile.getName();
            String storedFileName = System.currentTimeMillis() + "_" + originalFileName;
            Path destinationPath = Paths.get(employeeUploadDir.getAbsolutePath(), storedFileName);

            // 4. Copy the file (same as before)
            System.out.println("Copying file to: " + destinationPath.toString());
            Files.copy(sourceFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("File copied successfully.");

            // 5. Get other file metadata (same as before, but get fileType from user)
            String mimeType = Files.probeContentType(destinationPath);
            long fileSizeBytes = Files.size(destinationPath);
            System.out.print("Enter file type (e.g., profile_picture, resume, certificate): ");
            String fileType = scanner.nextLine();


            // 6. Save file info to database (same as before)
            System.out.println("Connecting to database to save file info...");
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
            conn.setAutoCommit(false);

            EmployeeFileInfo infoToSave = new EmployeeFileInfo(
                    employeeId,
                    destinationPath.toString(),
                    originalFileName,
                    mimeType,
                    fileSizeBytes,
                    fileType
            );
            int savedFileId = service.saveFileInfo(conn, infoToSave);

            if (savedFileId != -1) {
                conn.commit();
                System.out.println("SUCCESS: File information saved to database. Generated file_id: " + savedFileId);
            } else {
                conn.rollback();
                System.err.println("FAILURE: Could not save file information to database. Rolling back.");
                Files.deleteIfExists(destinationPath);
                System.err.println("Copied file has been deleted due to database save failure.");
                return;
            }

            // 7. Verify by retrieving (same as before)
            System.out.println("\n--- Verifying Saved File Info ---");
            EmployeeFileInfo retrievedFile = service.getLatestFileByType(conn, employeeId, fileType);
            if (retrievedFile != null) {
                System.out.println("Retrieved latest file of type '" + fileType + "':");
                System.out.println("  File ID: " + retrievedFile.getFileId());
                System.out.println("  Original Filename: " + retrievedFile.getOriginalFilename());
                System.out.println("  Stored File Path: " + retrievedFile.getFilePath());
                File checkFile = new File(retrievedFile.getFilePath());
                System.out.println("  Physical file exists at stored path: " + checkFile.exists());
            } else {
                System.err.println("VERIFICATION FAILED: Could not retrieve the file info that was just saved.");
            }

            // 8. Verify all files (same as before)
            System.out.println("\n--- Verifying All Files for Employee " + employeeId + " ---");
            List<EmployeeFileInfo> allFiles = service.getAllFilesForEmployee(conn, employeeId);
            if (allFiles.isEmpty()) {
                System.out.println("No files found for employee " + employeeId);
            } else {
                System.out.println("Found " + allFiles.size() + " file(s) for employee " + employeeId + ":");
                for (EmployeeFileInfo fi : allFiles) {
                    System.out.println("  " + fi.toString());
                }
            }


        } catch (IOException e) {
            System.err.println("File I/O Error: " + e.getMessage());
            e.printStackTrace();
            if (conn != null) try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
        } catch (SQLException e) {
            System.err.println("Database SQL Error: " + e.getMessage());
            e.printStackTrace();
            if (conn != null) try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace();
            if (conn != null) try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                    System.out.println("\nDatabase connection closed.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            scanner.close();
            System.out.println("Test finished.");
        }
    }
}